from multiprocessing import Pool
from subprocess import call

import subprocess
import os



try:
    input1PATH  = sys.argv[1]
    input2PATH  = sys.argv[2]
    outputPATH  = sys.argv[3]

except:
    input1PATH  = ""
    input2PATH  = ""
    outputPATH  = ""


sampleList = []


sets = {

    "samtools"   :   "/home/hwx/DevPipline/Tumor_SNP_Hwx/Software/samtools-1.4.1/samtools mpileup",
    "Varscan2"   :   "java -jar /home/hwx/DevPipline/Tumor_SNP_Hwx/Software/VarScan.v2.3.9.jar somatic",
    "genome"     :   "/home/hwx/DevPipline/Tumor_SNP_Hwx/Database/hg19/hg19.fa",
    "maxProcess" :   6,

}



def mpileup():

    cmd = "{samtools} -f {genome} {InputBAM}> {ResultBAM}".format(samtools=sets["samtools"], genome=sets["Varscan2"], InputBAM=, ResultBAM=)

    return cmd


def Varscan2():
    cmd = "{Varscan2} {NormalPileupBAM} {TumorPileupBAM} {Result}".format(Varscan2=sets["Varscan2"], NormalPileupBAM=, TumorPileupBAM=, Result=)

    return cmd


def multiP(arglist):

    P = Pool(sets["maxProcess"])

    for i in arglist:

        P.apply_async(call, args=[i,])

    P.close()
    P.join()



mpileup()
Varscan2()
